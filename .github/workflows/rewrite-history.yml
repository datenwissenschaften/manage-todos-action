name: Squash Commits After Tag

on:
  workflow_run:
    workflows: ["Increment Release Version"]  # Name of the first workflow
    types:
      - completed  # Trigger this workflow when the first workflow completes

permissions:
  contents: write  # Grants permission to modify repository content

jobs:
  squash-history:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch the full history to access all commits and tags

      - name: Fetch all tags and branches
        run: |
          # Fetch all remote branches and tags to ensure up-to-date information
          git fetch --all --tags

      - name: Set Git user identity based on repository owner
        run: |
          # Set Git user configuration using the repository owner's GitHub username
          git config --global user.name "${{ github.actor }}"
          # Set email using GitHub's noreply email format
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Get the latest tag
        id: get_latest
        run: |
          # Find the latest tag
          latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1))
          if [ -z "$latest_tag" ]; then
            echo "No tags found; exiting."
            exit 1
          fi
          echo "Latest tag found: $latest_tag"
          echo "tag=$latest_tag" >> $GITHUB_ENV

      - name: Squash all commits into one
        run: |
          # Checkout a new temporary branch for squashing commits
          git checkout -b temp-squash-branch

          # Reset to the initial commit to squash all commits into one
          git reset $(git rev-list --max-parents=0 HEAD)
          git add -A  # Stage all changes
          git commit -m "${{ env.tag }}"  # Commit with the latest release tag as the message

          # Move main branch (or your target branch) to this single commit
          git branch -M main  # Change 'main' if it's another branch
          git push origin main --force  # Force push to overwrite history

      - name: Update version number in README.txt
        run: |
          version=${{ env.tag }}
          version_number=${version#v}
          
          sed -i "s|uses: datenwissenschaften/manage-todos-action@v[0-9.]*|uses: datenwissenschaften/manage-todos-action@$version_number|" README.md

          git add README.md
          git commit -m "Update README.md with version $version_number"
          git push origin main --force

      - name: Verify the squashed commit
        run: |
          # Output the current state of the branch to verify the squash
          echo "Current HEAD commit after squash:"
          git log --oneline -5
