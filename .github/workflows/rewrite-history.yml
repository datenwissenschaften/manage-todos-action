name: Squash Commits After Release

on:
  release:
    types: [published]  # Trigger when a new release is published
  workflow_dispatch:    # Allows manual triggering for testing purposes

permissions:
  contents: write  # Grants permission to modify repository content

jobs:
  squash-history:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch the full history to access all commits and tags

      - name: Fetch all tags and branches
        run: |
          # Fetch all remote branches and tags
          git fetch --all --tags

      - name: Get the latest release tag
        id: get_latest
        run: |
          # Find the latest release tag
          latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1))
          if [ -z "$latest_tag" ]; then
            echo "No tags found; exiting."
            exit 1
          fi
          echo "Latest tag found: $latest_tag"
          echo "tag=$latest_tag" >> $GITHUB_ENV

      - name: Squash all commits into one
        run: |
          # Create a new temporary branch to perform the squash
          git checkout -b temp-squash-branch

          # Squash all commits into a single commit with the release tag as the message
          git reset $(git rev-list --max-parents=0 HEAD) # Reset to the first commit
          git add -A  # Add all changes to the new commit
          git commit -m "${{ env.tag }}" # Commit all changes with the release tag as the message

          # Move the main branch to the new single commit
          git branch -M main  # Replace 'main' with your branch name if different
          git push origin main --force  # Force push to overwrite history

      - name: Verify the squashed commit
        run: |
          # Output the current state of the branch to verify the squash
          echo "Current HEAD commit after squash:"
          git log --oneline -5
