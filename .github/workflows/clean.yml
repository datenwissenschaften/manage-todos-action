name: Clean Up Old Minor Versions

on:
  workflow_run:
    workflows: ["Test Action"]
    types:
      - completed

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Install GitHub CLI
        run: |
          # Install GitHub CLI
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Authenticate GitHub CLI
        run: |
          # Authenticate GitHub CLI using the token directly without environment variable conflicts
          gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"

      - name: Get the current release version
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Parse major version
        run: |
          MAJOR_VERSION=$(echo "${RELEASE_VERSION}" | cut -d '.' -f 1)
          echo "MAJOR_VERSION=${MAJOR_VERSION}" >> $GITHUB_ENV

      - name: Get list of tags
        run: |
          # Fetch all tags and filter out the ones matching the last major version
          TAGS=$(gh api repos/${{ github.repository }}/tags | jq -r '.[].name' | grep "^${MAJOR_VERSION}.")
          echo "Tags found: $TAGS"

          # Get the latest minor version tag
          LATEST_MINOR=$(echo "$TAGS" | sort -V | tail -1)
          echo "LATEST_MINOR=${LATEST_MINOR}" >> $GITHUB_ENV

      - name: Delete old minor versions except the last
        if: startsWith(env.RELEASE_VERSION, 'v')
        run: |
          for TAG in $TAGS; do
            if [ "$TAG" != "$LATEST_MINOR" ]; then
              echo "Deleting old tag: $TAG"
              gh api repos/${{ github.repository }}/git/refs/tags/$TAG -X DELETE
            fi
          done

      - name: Get list of releases
        run: |
          # Fetch all releases and filter based on the last major version
          RELEASES=$(gh api repos/${{ github.repository }}/releases | jq -r '.[] | select(.tag_name | startswith(env.MAJOR_VERSION)) | .tag_name')
          echo "Releases found: $RELEASES"

      - name: Delete old releases except the last
        if: startsWith(env.RELEASE_VERSION, 'v')
        run: |
          for RELEASE in $RELEASES; do
            if [ "$RELEASE" != "$LATEST_MINOR" ]; then
              echo "Deleting old release: $RELEASE"
              # Get the release ID and delete it
              RELEASE_ID=$(gh api repos/${{ github.repository }}/releases | jq -r ".[] | select(.tag_name == \"$RELEASE\") | .id")
              gh api repos/${{ github.repository }}/releases/$RELEASE_ID -X DELETE
            fi
          done
