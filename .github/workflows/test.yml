name: Test Action

on:
  workflow_run:
    workflows: [ "Increment Release Version" ]
    types:
      - completed

permissions:
  contents: write
  issues: write

jobs:
  test-manage-todos:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install requests

      - name: Set Git user identity based on repository owner
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Create test environment
        run: |
          # Create a test directory with some sample files
          mkdir -p src/datenwissenschaften
          echo "// TODO: Fix the bug in logic" > src/datenwissenschaften/data.service.ts
          echo "// TODO: Optimize the calculation" > src/datenwissenschaften/science.service.ts
          
          # Initialize a new git repository to test git blame
          git init
          git add .
          git commit -m "Initial commit with TODOs"

      - name: Run Manage TODO Comments Action
        uses: ./
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          labels: "todo, help wanted"

      - name: Verify results
        run: |
          echo "Verifying that the issues were created and TODOs were updated"

          # Check if the issues are created by listing the last 5 issues
          echo "Listing recent issues:"
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/repos/${{ github.repository }}/issues?per_page=5

          # Check the files for updated TODO comments with issue numbers
          echo "Checking the modified files:"
          cat src/datenwissenschaften/data.service.ts
          cat src/datenwissenschaften/science.service.ts

      - name: Verify issue numbers are attached to TODO comments
        run: |
          # Check modified files to verify issue numbers are attached
          echo "Verifying that issue numbers are correctly attached to TODO comments"

          # Define files to check
          files=("src/datenwissenschaften/data.service.ts" "src/datenwissenschaften/science.service.ts")

          for file in "${files[@]}"; do
            echo "Checking $file"
            cat "$file"

            # Output the matching lines for debugging purposes
            echo "Matching lines with issue numbers:"
            grep -E "// TODO:.*\[#\d+\]" "$file" || echo "No matches found."

            # Use grep to ensure the TODO comment contains the expected pattern with an issue number
            if grep -Eq "// TODO:.*\[#\d+\]" "$file"; then
              echo "TODO comment in $file has an issue number attached."
            else
              echo "Error: TODO comment in $file does not have an issue number attached." >&2
              exit 1
            fi
          done

      - name: Close all created issues
        run: |
          echo "Closing all issues created by the action"
          
          # Fetch recent issues with label 'todo' to identify issues created by the action
          issues=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3+json" \
                 https://api.github.com/repos/${{ github.repository }}/issues?labels=todo&per_page=5)

          # Loop through each issue and close it
          echo "$issues" | jq -c '.[]' | while read -r issue; do
            issue_number=$(echo "$issue" | jq '.number')
            echo "Closing issue #$issue_number"
            curl -X PATCH \
                 -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3+json" \
                 https://api.github.com/repos/${{ github.repository }}/issues/$issue_number \
                 -d '{"state": "closed"}'
          done