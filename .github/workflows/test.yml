name: Test Action

on:
  workflow_run:
    workflows: [ "Increment Release Version" ]
    types:
      - completed

permissions:
  contents: write
  issues: write

jobs:
  test-manage-todos:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install requests

      - name: Set Git user identity based on repository owner
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Create test environment
        run: |
          # Create a test directory with some sample files
          mkdir -p src/datenwissenschaften
          echo "// TODO: Fix the bug in logic" > src/datenwissenschaften/data.service.ts
          echo "// TODO: Optimize the calculation" > src/datenwissenschaften/science.service.ts
          
          # Initialize a new git repository to test git blame
          git init
          git add .
          git commit -m "Initial commit with TODOs"

      - name: Run Manage TODO Comments Action
        uses: ./
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          labels: "todo, help wanted, test-issue"

      - name: Verify results
        run: |
          echo "Verifying that the issues were created and TODOs were updated"

          # Check if the issues are created by listing the last 5 issues
          echo "Listing recent issues:"
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/repos/${{ github.repository }}/issues?per_page=5

          # Check the files for updated TODO comments with issue numbers
          echo "Checking the modified files:"
          cat src/datenwissenschaften/data.service.ts
          cat src/datenwissenschaften/science.service.ts

      - name: Verify issue numbers are attached to TODO comments using Python
        run: |
          # Verification script to check issue numbers are correctly attached
          python - <<EOF
          import re
          
          # Define files to check
          files = ["src/datenwissenschaften/data.service.ts", "src/datenwissenschaften/science.service.ts"]
          
          # Function to check if issue numbers are correctly attached
          def check_todo_issues(file_path):
              with open(file_path, "r") as file:
                  lines = file.readlines()
          
              # Flag to track if TODO comments have issue numbers attached
              issue_number_attached = False
          
              for line in lines:
                  # Search for TODO comments with attached issue numbers
                  if re.search(r"// TODO:.*\[#\d+\]", line):
                      print(f"Found TODO with issue number in {file_path}: {line.strip()}")
                      issue_number_attached = True
                  elif "// TODO" in line:
                      print(f"Error: TODO comment without issue number in {file_path}: {line.strip()}")
                      issue_number_attached = False
                      break
          
              if not issue_number_attached:
                  print(f"Verification failed: Not all TODO comments in {file_path} have issue numbers attached.")
                  exit(1)
          
          # Check each file
          for file in files:
              print(f"Checking {file}")
              check_todo_issues(file)
          
          print("Verification successful: All TODO comments have issue numbers attached.")
          EOF

      - name: Close all created test issues
        run: |
          echo "Closing all issues created by the test"

          # Fetch issues labeled with 'test-issue' to identify issues created during the test
          issues=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3+json" \
                 https://api.github.com/repos/${{ github.repository }}/issues?labels=test-issue&state=open&per_page=100)

          # Loop through each issue and close it
          echo "$issues" | jq -c '.[]' | while read -r issue; do
            issue_number=$(echo "$issue" | jq '.number')
            echo "Closing test issue #$issue_number"
            curl -X PATCH \
                 -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3+json" \
                 https://api.github.com/repos/${{ github.repository }}/issues/$issue_number \
                 -d '{"state": "closed"}'
          done